#!/bin/bash

# Cleanup Script for OpenShift VPC Automation
# Removes files and directories generated by create-vpc.sh, create-bastion.sh, and deploy-openshift.sh

set -euo pipefail

# Default values
DEFAULT_VPC_OUTPUT_DIR="./vpc-output"
DEFAULT_BASTION_OUTPUT_DIR="./bastion-output"
DEFAULT_OPENSHIFT_INSTALL_DIR="./openshift-install"
DEFAULT_LOGS_DIR="./logs"
DEFAULT_CLUSTER_NAME="my-cluster"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to display usage
usage() {
    echo "Usage: $0 [options]"
    echo ""
    echo "Cleanup Script for OpenShift VPC Automation"
    echo "Removes files and directories generated by automation scripts"
    echo ""
    echo "Options:"
    echo "  --vpc-output-dir        VPC output directory (default: $DEFAULT_VPC_OUTPUT_DIR)"
    echo "  --bastion-output-dir    Bastion output directory (default: $DEFAULT_BASTION_OUTPUT_DIR)"
    echo "  --openshift-install-dir OpenShift installation directory (default: $DEFAULT_OPENSHIFT_INSTALL_DIR)"
    echo "  --logs-dir              Logs directory (default: $DEFAULT_LOGS_DIR)"
    echo "  --cluster-name          Cluster name for SSH key cleanup (default: $DEFAULT_CLUSTER_NAME)"
    echo "  --region                AWS region for resource cleanup (default: us-east-1)"
    echo "  --cleanup-aws-resources Also cleanup AWS resources (VPC, bastion, etc.)"
    echo "  --dry-run               Show what would be deleted without actually deleting"
    echo "  --force                 Skip confirmation prompts"
    echo "  --help                  Display this help message"
    echo ""
    echo "Examples:"
    echo "  $0 --dry-run                    # Preview what will be cleaned"
    echo "  $0 --force                      # Clean local files without confirmation"
    echo "  $0 --cleanup-aws-resources      # Also cleanup AWS resources"
    echo "  $0 --cluster-name my-cluster    # Clean specific cluster files"
}

# Function to print colored output
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if directory exists and has content
check_directory() {
    local dir="$1"
    local description="$2"
    
    if [[ -d "$dir" ]]; then
        local file_count=$(find "$dir" -type f 2>/dev/null | wc -l)
        if [[ $file_count -gt 0 ]]; then
            print_info "Found $description: $dir ($file_count files)"
            return 0
        else
            print_info "Found empty $description: $dir"
            return 0
        fi
    else
        print_info "No $description found: $dir"
        return 1
    fi
}

# Function to cleanup local files
cleanup_local_files() {
    local dry_run="$1"
    local force="$2"
    
    print_info "Cleaning up local files and directories..."
    
    # List of directories to cleanup
    local dirs=(
        "$VPC_OUTPUT_DIR"
        "$BASTION_OUTPUT_DIR"
        "$OPENSHIFT_INSTALL_DIR"
        "$LOGS_DIR"
    )
    
    # List of files to cleanup
    local files=(
        "${CLUSTER_NAME}-key.pem"
        "${CLUSTER_NAME}-bastion-key.pem"
        "*.pem"
        "install-config.yaml"
        "install-config.yaml.backup.*"
    )
    
    local found_items=()
    
    # Check directories
    for dir in "${dirs[@]}"; do
        if check_directory "$dir" "directory"; then
            found_items+=("$dir")
        fi
    done
    
    # Check files
    for pattern in "${files[@]}"; do
        for file in $pattern; do
            if [[ -f "$file" ]]; then
                print_info "Found file: $file"
                found_items+=("$file")
            fi
        done
    done
    
    # Check for any .pem files
    for pem_file in *.pem; do
        if [[ -f "$pem_file" ]]; then
            print_info "Found SSH key: $pem_file"
            found_items+=("$pem_file")
        fi
    done
    
    if [[ ${#found_items[@]} -eq 0 ]]; then
        print_info "No files or directories found to cleanup"
        return 0
    fi
    
    echo ""
    print_warning "Found ${#found_items[@]} items to cleanup:"
    for item in "${found_items[@]}"; do
        echo "  - $item"
    done
    echo ""
    
    if [[ "$dry_run" == "yes" ]]; then
        print_info "DRY RUN: Would delete the above items"
        return 0
    fi
    
    if [[ "$force" != "yes" ]]; then
        read -p "Are you sure you want to delete these files and directories? (yes/no): " -r
        echo
        if [[ ! $REPLY =~ ^[Yy][Ee][Ss]$ ]]; then
            print_info "Cleanup cancelled"
            return 1
        fi
    fi
    
    # Delete directories
    for dir in "${dirs[@]}"; do
        if [[ -d "$dir" ]]; then
            if [[ "$dry_run" == "yes" ]]; then
                print_info "DRY RUN: Would delete directory: $dir"
            else
                rm -rf "$dir"
                print_success "Deleted directory: $dir"
            fi
        fi
    done
    
    # Delete files
    for pattern in "${files[@]}"; do
        for file in $pattern; do
            if [[ -f "$file" ]]; then
                if [[ "$dry_run" == "yes" ]]; then
                    print_info "DRY RUN: Would delete file: $file"
                else
                    rm -f "$file"
                    print_success "Deleted file: $file"
                fi
            fi
        done
    done
    
    # Delete .pem files
    for pem_file in *.pem; do
        if [[ -f "$pem_file" ]]; then
            if [[ "$dry_run" == "yes" ]]; then
                print_info "DRY RUN: Would delete SSH key: $pem_file"
            else
                rm -f "$pem_file"
                print_success "Deleted SSH key: $pem_file"
            fi
        fi
    done
    
    return 0
}

# Function to cleanup AWS resources
cleanup_aws_resources() {
    local dry_run="$1"
    local force="$2"
    
    print_info "Cleaning up AWS resources..."
    
    # Build AWS CLI command with profile if set
    local aws_cmd="aws"
    if [[ -n "${AWS_PROFILE:-}" ]]; then
        aws_cmd="aws --profile ${AWS_PROFILE}"
    fi
    
    # Check AWS credentials
    if ! $aws_cmd sts get-caller-identity &> /dev/null; then
        print_error "AWS credentials not configured"
        return 1
    fi
    
    local found_resources=()
    
    # Check for VPC CloudFormation stack
    local vpc_stack_name="${CLUSTER_NAME}-vpc-*"
    local vpc_stacks=$($aws_cmd cloudformation list-stacks \
        --region "$REGION" \
        --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE \
        --query "StackSummaries[?contains(StackName, '${CLUSTER_NAME}-vpc')].StackName" \
        --output text 2>/dev/null || echo "")
    
    if [[ -n "$vpc_stacks" ]]; then
        for stack in $vpc_stacks; do
            print_info "Found VPC CloudFormation stack: $stack"
            found_resources+=("VPC Stack: $stack")
        done
    fi
    
    # Check for bastion instance
    local bastion_instances=$($aws_cmd ec2 describe-instances \
        --region "$REGION" \
        --filters "Name=tag:Name,Values=${CLUSTER_NAME}-bastion" "Name=instance-state-name,Values=running,stopped" \
        --query 'Reservations[].Instances[].{InstanceId:InstanceId,State:State.Name}' \
        --output text 2>/dev/null || echo "")
    
    if [[ -n "$bastion_instances" ]]; then
        print_info "Found bastion instance(s):"
        echo "$bastion_instances" | while read -r instance_id state; do
            if [[ -n "$instance_id" && "$instance_id" != "None" ]]; then
                print_info "  - $instance_id (State: $state)"
                found_resources+=("Bastion Instance: $instance_id")
            fi
        done
    fi
    
    # Check for SSH key pairs
    local ssh_keys=("${CLUSTER_NAME}-key" "${CLUSTER_NAME}-bastion-key")
    for key_name in "${ssh_keys[@]}"; do
        if $aws_cmd ec2 describe-key-pairs --key-names "$key_name" --region "$REGION" &> /dev/null; then
            print_info "Found SSH key pair: $key_name"
            found_resources+=("SSH Key: $key_name")
        fi
    done
    
    if [[ ${#found_resources[@]} -eq 0 ]]; then
        print_info "No AWS resources found to cleanup"
        return 0
    fi
    
    echo ""
    print_warning "Found ${#found_resources[@]} AWS resources to cleanup:"
    for resource in "${found_resources[@]}"; do
        echo "  - $resource"
    done
    echo ""
    
    if [[ "$dry_run" == "yes" ]]; then
        print_info "DRY RUN: Would delete the above AWS resources"
        return 0
    fi
    
    if [[ "$force" != "yes" ]]; then
        print_warning "⚠️  This will permanently delete AWS resources!"
        read -p "Are you sure you want to delete these AWS resources? (yes/no): " -r
        echo
        if [[ ! $REPLY =~ ^[Yy][Ee][Ss]$ ]]; then
            print_info "AWS cleanup cancelled"
            return 1
        fi
    fi
    
    # Delete bastion instances
    if [[ -n "$bastion_instances" ]]; then
        echo "$bastion_instances" | while read -r instance_id state; do
            if [[ -n "$instance_id" && "$instance_id" != "None" ]]; then
                if [[ "$dry_run" == "yes" ]]; then
                    print_info "DRY RUN: Would terminate bastion instance: $instance_id"
                else
                    $aws_cmd ec2 terminate-instances --instance-ids "$instance_id" --region "$REGION"
                    print_success "Terminated bastion instance: $instance_id"
                fi
            fi
        done
    fi
    
    # Delete SSH key pairs
    for key_name in "${ssh_keys[@]}"; do
        if $aws_cmd ec2 describe-key-pairs --key-names "$key_name" --region "$REGION" &> /dev/null; then
            if [[ "$dry_run" == "yes" ]]; then
                print_info "DRY RUN: Would delete SSH key pair: $key_name"
            else
                $aws_cmd ec2 delete-key-pair --key-name "$key_name" --region "$REGION"
                print_success "Deleted SSH key pair: $key_name"
            fi
        fi
    done
    
    # Delete VPC CloudFormation stacks
    if [[ -n "$vpc_stacks" ]]; then
        for stack in $vpc_stacks; do
            if [[ "$dry_run" == "yes" ]]; then
                print_info "DRY RUN: Would delete VPC CloudFormation stack: $stack"
            else
                $aws_cmd cloudformation delete-stack --stack-name "$stack" --region "$REGION"
                print_success "Initiated deletion of VPC CloudFormation stack: $stack"
            fi
        done
    fi
    
    return 0
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --vpc-output-dir)
            VPC_OUTPUT_DIR="$2"
            shift 2
            ;;
        --bastion-output-dir)
            BASTION_OUTPUT_DIR="$2"
            shift 2
            ;;
        --openshift-install-dir)
            OPENSHIFT_INSTALL_DIR="$2"
            shift 2
            ;;
        --logs-dir)
            LOGS_DIR="$2"
            shift 2
            ;;
        --cluster-name)
            CLUSTER_NAME="$2"
            shift 2
            ;;
        --region)
            REGION="$2"
            shift 2
            ;;
        --cleanup-aws-resources)
            CLEANUP_AWS_RESOURCES="yes"
            shift
            ;;
        --dry-run)
            DRY_RUN="yes"
            shift
            ;;
        --force)
            FORCE="yes"
            shift
            ;;
        --help)
            usage
            exit 0
            ;;
        *)
            print_error "Unknown option: $1"
            usage
            exit 1
            ;;
    esac
done

# Set default values
VPC_OUTPUT_DIR=${VPC_OUTPUT_DIR:-$DEFAULT_VPC_OUTPUT_DIR}
BASTION_OUTPUT_DIR=${BASTION_OUTPUT_DIR:-$DEFAULT_BASTION_OUTPUT_DIR}
OPENSHIFT_INSTALL_DIR=${OPENSHIFT_INSTALL_DIR:-$DEFAULT_OPENSHIFT_INSTALL_DIR}
LOGS_DIR=${LOGS_DIR:-$DEFAULT_LOGS_DIR}
CLUSTER_NAME=${CLUSTER_NAME:-$DEFAULT_CLUSTER_NAME}
REGION=${REGION:-us-east-1}
CLEANUP_AWS_RESOURCES=${CLEANUP_AWS_RESOURCES:-no}
DRY_RUN=${DRY_RUN:-no}
FORCE=${FORCE:-no}

# Main execution
echo "🧹 OpenShift VPC Automation Cleanup Script"
echo "=========================================="
echo ""
echo "📋 Configuration:"
echo "   VPC Output Dir: $VPC_OUTPUT_DIR"
echo "   Bastion Output Dir: $BASTION_OUTPUT_DIR"
echo "   OpenShift Install Dir: $OPENSHIFT_INSTALL_DIR"
echo "   Logs Dir: $LOGS_DIR"
echo "   Cluster Name: $CLUSTER_NAME"
echo "   Region: $REGION"
echo "   Cleanup AWS Resources: $CLEANUP_AWS_RESOURCES"
echo "   Dry Run: $DRY_RUN"
echo "   Force: $FORCE"
echo ""

# Cleanup local files
cleanup_local_files "$DRY_RUN" "$FORCE"

# Cleanup AWS resources if requested
if [[ "$CLEANUP_AWS_RESOURCES" == "yes" ]]; then
    echo ""
    cleanup_aws_resources "$DRY_RUN" "$FORCE"
fi

echo ""
if [[ "$DRY_RUN" == "yes" ]]; then
    print_success "Dry run completed - no files or resources were actually deleted"
else
    print_success "Cleanup completed successfully!"
fi

echo ""
echo "💡 Tips:"
echo "  - Use --dry-run to preview what will be deleted"
echo "  - Use --force to skip confirmation prompts"
echo "  - Use --cleanup-aws-resources to also delete AWS resources"
echo "  - Check the backup script to save important files before cleanup" 